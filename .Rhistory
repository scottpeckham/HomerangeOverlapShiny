"Burnt River"=or.prj, "Lookout Mountain" =or.prj,
"Yakima Canyon" = wa.prj, "Cleman Mountain" = wa.prj)
crs.projection <- switch(herd,
"Burnt River"=or.crsprj, "Lookout Mountain" =or.crsprj,
"Yakima Canyon" = wa.crsprj, "Cleman Mountain" = wa.crsprj)
gps.pr <- gps.sf %>% subset(select=AnimalID) %>% st_transform(projection)
gps.sp <- as(gps.pr,"Spatial")
# construct the matrix for the function dist()
df <- cbind(gps.sp@data,gps.sp@coords)
df.m <- df %>% group_by(AnimalID) %>% summarise(medX=median(coords.x1),
medY=median(coords.x2),
sdX=sd(coords.x1),
sdY=sd(coords.x2))
df.m <- df.m %>% data.frame()
xy <- df.m[,2:3]
rownames(xy) <- df.m$AnimalID
# perform clustering
p.dist <- dist(xy)
chc <- hclust(p.dist, method="average")
xy.sp <- SpatialPointsDataFrame(matrix(c(xy$medX,xy$medY), ncol=2),
data.frame(AnimalID=rownames(xy)), proj4string=crs.projection)
# Distance threshold, larger value will yield fewer clusters
#   6-7k chosen here, it's ~ axis of typical Lookout Mountain home range
#d <- 6000
d <- 3 * median(sqrt(df.m$sdX^2+df.m$sdY^2))
chc.d <- cutree(chc, h=d)
nclust <- max(chc.d)
# Join results to display sp points
xy.sp@data <- data.frame(xy.sp@data, Clust=chc.d)
# Cluster membership, ordered
rownames(xy.sp@data) <- NULL
clusters <- sort(unique(xy.sp@data$Clust))
members <- c(rep("",length(clusters)))
for (i in 1:length(clusters)){
membs <- xy.sp@data$AnimalID[xy.sp@data$Clust==clusters[i]]
members[i] <- str_flatten(membs,collaps=", ")
}
kable(data.frame(Cluster=clusters,Members=members),align='ll')
#plot(chc, main="Cluster Dendrogram",cex=0.6)
dend <- as.dendrogram(chc)
dend <- set(dend, "labels_cex", 0.6)
plot(dend, main="Cluster Dendrogram")
nclust <- as.integer(max(xy.sp@data$Clust))
mycolors1 <- sample(col_vector, nclust)
# plot(chc,cex=0.6,main=paste("Cluster Dendrogram cut at ",d," (m)",sep=''))
# rect.hclust(chc,h=d,border=rev(mycolors1))
# color labels by cluster:
col_clus <- mycolors1[chc.d]
labels_colors(dend) <- col_clus[order.dendrogram(dend)]
plot(dend, main=paste("Cluster Dendrogram cut at ",round(d)," (m)",sep=''))
mapview(xy.sp,zcol="Clust",col.regions=mycolors1, alpha.regions=1,label="AnimalID")
shiny::runApp('~/DocumentsNew/BighornSheep/FY22-WSF-GIA/RCode/ShinyApps/HomeRangeOverlap/HomerangeOverlapShiny')
setwd("~/DocumentsNew/BighornSheep/FY22-WSF-GIA/RCode/ShinyApps/HomeRangeOverlap/HomerangeOverlapShiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
print(paste("Total number of rows in GPS table for HR calculation: ",nrow(gps.sf)))
runApp()
runApp()
source("~/DocumentsNew/BighornSheep/FY22-WSF-GIA/RCode/Markdown/HomeRange-helpers.R")
runApp()
runApp()
runApp()
matrix_data = matrix(c(1, 3, 4, 5, 6, 7, 9, 6, 3),
nrow=3, ncol=3)
# display actual matrix
print(matrix_data)
# extract diagonal elements
matrix_data[row(matrix_data) == col(matrix_data)]
matrix_data[row(matrix_data) == col(matrix_data)] <- NA
matrix_data
setwd("~/DocumentsNew/BighornSheep/FY22-WSF-GIA/RCode/ShinyApps/HomeRangeOverlap/HomerangeOverlapShiny")
YakimaCanyon_Cluster-Homerange-Dashboard.html
library(shiny)
library(shinydashboard)
library(mapview)
library(sf)
library(sp)
library(RColorBrewer)
library(leaflet)
library(dplyr)
library(DT)
library(visNetwork)
load("data/appdata.rda")
gps <- addBioYear(gps)
gps <- st_as_sf(gps, coords = c("longitude", "latitude"), crs = 4326)
min.fixes <- 30
or.prj <- 26911 # UTM11N NAD83
or.crsprj <- CRS("+init=epsg:26911")
gps.orig <- gps
gps <- gps %>% filter(Herd=="Burnt River")
nrow(gps)
outptut.proj <- or.prj
# check number of locations per animal, adehabitat requires >5/per
loc.per.animal <- gps %>% group_by(AnimalID) %>%
summarize(Fix_count =  n())
drops <- which(loc.per.animal$Fix_count < min.fixes,arr.ind=TRUE)
excludes <- loc.per.animal$AnimalID[drops]
if (length(drops)>0) gps <- gps[!gps$AnimalID %in% excludes,]
# ensure AnimalID is a factor
gps$AnimalID <- factor(gps$AnimalID)
unique(gps$AnimalID)
a <- unique(gps$AnimalID)
match(a,gps$AnimalID)
gps[match(a,gps$AnimalID),]
# create a table that holds attributes for each animal (to add back to polygons)
att.table <- gps[match(unique(gps$AnimalID),gps$AnimalID),]
att.table
gps.sf <- subset(gps,select= AnimalID) # Keep just the "AnimalID" column of spatial object (again a restraint of the package)
# Transform input gps to proj.crs (typically UTM for Oregon)
gps.sf.proj <- st_transform(gps.sf,crs=output.proj)  # transform to user input or UTM11 WGS84
output.proj <- or.prj
# Transform input gps to proj.crs (typically UTM for Oregon)
gps.sf.proj <- st_transform(gps.sf,crs=output.proj)  # transform to user input or UTM11 WGS84
# convert from sf to spatial points data frame (reqd by adehabitatHR)
gps.collarIDT <- as(gps.sf.proj, "Spatial")
print(paste("Kernel function: Bivariate normal"))
print(paste("Total number of rows in GPS table for HR calculation: ",nrow(gps.sf)))
print(paste("Date range for HR calculation: ",(range(gps$acquisitiontime))[1]," to ",(range(gps$acquisitiontime))[2]))
print(paste("Contour level is set to: ",contour.percent, "%"))
contour.percent <- 50
print(paste("Contour level is set to: ",contour.percent, "%"))
# transform each data set in list from WGS84 to projected coords
# and compute UD and polygon HR
kud <- kernelUD(gps.collarIDT, grid=400,same4all = TRUE, h="href",extent=0.5)
homeranges <- getverticeshr(kud, percent=contour.percent)
homeranges@data
att.data[homeranges@data$id,]
att.table[homeranges@data$id,]
left_join(homeranges@data,att.table,join_by(id == AnimalID))
runApp()
mapview(homeranges)
homeranges@data
# add some attributes to the polygon data
newtable <- left_join(homeranges@data,att.table,join_by(id == AnimalID))
homeranges@data <- newtable[,1:10]
data <- homeranges
# a large unique color vector for big sets of animalID
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
# we want same color pattern for test results (having no "Detected" can swap colors between plots)
# colors for test results #
tcol <- brewer.pal(3,'RdYlGn')
pcr.col.map <- case_when(
data@data$CapturePCRStatus == "Detected" ~ 1,
data@data$CapturePCRStatus == "Indeterminate" ~ 2,
data@data$CapturePCRStatus == "Not detected" ~ 3
)
pcr.colors <- tcol[pcr.col.map]
ser.col.map <- case_when(
data@data$CaptureELISAStatus == "Detected" ~ 1,
data@data$CaptureELISAStatus == "Indeterminate" ~ 2,
data@data$CaptureELISAStatus == "Not detected" ~ 3
)
ser.colors <- tcol[ser.col.map]
n.animals <- length(unique(data@data$id))
id.col <- sample(col_vector, n.animals)
sex.col <- c("pink","blue")
celisa.col <- colorRamps::matlab.like(25)
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
outmap <- mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)
data@data
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)
mapview(data, zcol="id", burst=TRUE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,alpha=0.8)
celisa.col <- colorRamps::matlab.like(n.animals)
mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,alpha=0.8)
runApp()
runApp()
data@data$CapturePCRStatus
pcr.colors
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,alpha=0.8)
outmap
data <- gps.orig %>% filter(Herd=="Yakima Canyon")
gps <- data
# check number of locations per animal, adehabitat requires >5/per
loc.per.animal <- gps %>% group_by(AnimalID) %>%
summarize(Fix_count =  n())
drops <- which(loc.per.animal$Fix_count < min.fixes,arr.ind=TRUE)
excludes <- loc.per.animal$AnimalID[drops]
if (length(drops)>0) gps <- gps[!gps$AnimalID %in% excludes,]
# ensure AnimalID is a factor
gps$AnimalID <- factor(gps$AnimalID)
# create a table that holds attributes for each animal (to add back to polygons)
att.table <- gps[match(unique(gps$AnimalID),gps$AnimalID),]
gps.sf <- subset(gps,select= AnimalID) # Keep just the "AnimalID" column of spatial object (again a restraint of the package)
# Transform input gps to proj.crs (typically UTM for Oregon)
gps.sf.proj <- st_transform(gps.sf,crs=output.proj)  # transform to user input or UTM11 WGS84
# convert from sf to spatial points data frame (reqd by adehabitatHR)
gps.collarIDT <- as(gps.sf.proj, "Spatial")
print(paste("Kernel function: Bivariate normal"))
print(paste("Total number of rows in GPS table for HR calculation: ",nrow(gps.sf)))
print(paste("Date range for HR calculation: ",(range(gps$acquisitiontime))[1]," to ",(range(gps$acquisitiontime))[2]))
print(paste("Contour level is set to: ",contour.percent, "%"))
# transform each data set in list from WGS84 to projected coords
# and compute UD and polygon HR
kud <- kernelUD(gps.collarIDT, grid=400,same4all = TRUE, h="href",extent=0.5)
homeranges <- getverticeshr(kud, percent=contour.percent)
# add some attributes to the polygon data
newtable <- left_join(homeranges@data,att.table,join_by(id == AnimalID))
homeranges@data <- newtable[,1:10]
data <- homeranges
# we want same color pattern for test results (having no "Detected" can swap colors between plots)
# colors for test results #
tcol <- brewer.pal(3,'RdYlGn')
pcr.col.map <- case_when(
data@data$CapturePCRStatus == "Detected" ~ 1,
data@data$CapturePCRStatus == "Indeterminate" ~ 2,
data@data$CapturePCRStatus == "Not detected" ~ 3
)
pcr.colors <- tcol[pcr.col.map]
ser.col.map <- case_when(
data@data$CaptureELISAStatus == "Detected" ~ 1,
data@data$CaptureELISAStatus == "Indeterminate" ~ 2,
data@data$CaptureELISAStatus == "Not detected" ~ 3
)
ser.colors <- tcol[ser.col.map]
n.animals <- length(unique(data@data$id))
id.col <- sample(col_vector, n.animals)
sex.col <- c("pink","blue")
celisa.col <- colorRamps::matlab.like(n.animals)
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,alpha=0.8)
outmap
unique(pcr.col.map)
pcr.col.map <- case_when(
data@data$CapturePCRStatus == "Detected" ~ 1,
data@data$CapturePCRStatus == "Indeterminate" ~ 2,
data@data$CapturePCRStatus == "Not detected" ~ 3
)
pcr.colors <- tcol[sort(unique(pcr.col.map))]
ser.col.map <- case_when(
data@data$CaptureELISAStatus == "Detected" ~ 1,
data@data$CaptureELISAStatus == "Indeterminate" ~ 2,
data@data$CaptureELISAStatus == "Not detected" ~ 3
)
ser.colors <- tcol[sort(unique(ser.col.map))]
n.animals <- length(unique(data@data$id))
id.col <- sample(col_vector, n.animals)
sex.col <- c("pink","blue")
celisa.col <- colorRamps::matlab.like(n.animals)
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,alpha=0.8)
outmap
runApp()
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80),alpha=0.8)
outmap
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80),alpha=0.8)
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80),alpha=0.8)
celisa.col <- colorRamps::matlab.like(25)
outmap <- mapview(data, zcol="id", burst=FALSE,legend=TRUE, cex=4,lwd=1, col.regions=id.col,alpha=0.8)+
mapview(data, zcol="Sex", legend=TRUE, cex=4,lwd=1, col.regions=sex.col,alpha=0.8)+
mapview(data, zcol="CapturePCRStatus", legend=TRUE, cex=4,lwd=1, col.regions=pcr.colors,alpha=0.8)+
mapview(data, zcol="CaptureELISAStatus", legend=TRUE, cex=4,lwd=1, col.regions=ser.colors,alpha=0.8)+
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80),alpha=0.8)
celisa.col <- colorRamps::matlab.like(25)
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80),alpha=0.8)
mapview(data, zcol="Capture_cELISA", legend=TRUE, cex=4,lwd=1, col.regions=celisa.col,at=c(-15,0,20,40,60,80,100),alpha=0.8)
runApp()
runApp()
unique(gps.orig$Herd)
which(is.na(gps.orig$Herd))
inds <- which(is.na(gps.orig$Herd))
gps.orig[inds[1],]
length(inds)
gps.orig[inds["129"],]
gps.orig[inds[129],]
# Download GPS data from Vectronics and load it to our DB #
#   written by S. Peckham 1/23/23
# required packages #
library(collar)
library(odbc)
library(RSQLite)
library(dplyr)
# User supplied directory where .keyx files are stored #
keydir <- "/Users/scottp/DocumentsNew/BighornSheep/FY22-WSF-GIA/GPS_data/CollarKeys"
# Fetch all the vectronic collar data for every key file in this directory #
# where the key files are stored, convert directory to file paths using collar package function
paths <- get_paths(keydir)
gps.dat <- fetch_vectronics(paths, type = "gps")
# if you want to restrict to a certain date to appended it to previous table, uncomment the below lines
#      if you want to append to an existing file, then switch the overwrite option to append, see help pages
#after <- "2021-12-31T00:00:00"
#gps.dat <- fetch_vectronics(paths, type = "gps", start_date=after,which_date = "acquisition")
# thin the data (remove excess fields to reduce size)
gps.dat <- gps.dat %>% select(c(idposition,idcollar,acquisitiontime,scts,latitude,longitude,height,dop))
# Connect to the data base, write all the data to a new table with today's date #
#dbpath <- "/Users/scottp/DocumentsNew/BighornSheep/FY22-WSF-GIA/Databases/BHS_TriState.db"
dbpath <- "/Users/scottp/Library/CloudStorage/Box-Box/WSF-GIA-FY22/Database/BHS_TriState.db"
con <- dbConnect(RSQLite::SQLite(),dbpath, extended_types=TRUE)
table.name <- paste("VectronicsGPS_",format(Sys.Date(), "%Y_%m_%d"),sep='')
dbWriteTable(con, table.name,gps.dat,overwrite=TRUE)
# close out
dbDisconnect(con)
###################### finished
# packages #
library(odbc)
library(RSQLite)
library(dplyr)
# SETTINGS:  User-supplied inputs to consider updating for your use
#dbpath <- "/Users/scottp/DocumentsNew/BighornSheep/FY22-WSF-GIA/Databases/BHS_TriState.db"
dbpath <- "/Users/scottp/Library/CloudStorage/Box-Box/WSF-GIA-FY22/Database/BHS_TriState.db"
gps.table.name <- "VectronicsGPS_2023_04_26"
study.sheep.tname <- "TriState_StudySheep"
collar.dep.tname <- "TriState_Collar_Deployment"
cap.tname <- "TriState_Capture"
ser.tname <- "TriState_Serology"
pcr.tname <- "TriState_Bacteriology"
offset <- 1 * 60 * 60 * 24 # number of days to buffer the start/stop to account for any mismatch
#  between and start/end times to prevent fixes on road, helicopter, offices
ended.prefix <- "AnimalID_GPS_Data_EndedCollars_"
active.prefix <- "AnimalID_GPS_Data_ActiveCollars_"
all.prefix <- "AnimalID_GPS_Data_AllCollars_"
# --------
# Connect to the data base #
con <- dbConnect(RSQLite::SQLite(),dbpath, extended_types=TRUE)
# List out tables, names needed to read below (uncomment to see list in R console)
#dbListTables(con)
# read a table into a dataframe
gps <- dbReadTable(con,gps.table.name)
ss <- dbReadTable(con,study.sheep.tname)
cdep <- dbReadTable(con,collar.dep.tname)
cap <- dbReadTable(con,cap.tname)
pcr <- dbReadTable(con,pcr.tname)
ser <- dbReadTable(con,ser.tname)
# some require formatting of date fields and such #
# format the date fields into an R posixct object
cdep$Collar_start <- as.POSIXct(strptime(cdep$Collar_start,format="%Y-%m-%d %H:%M",tz="GMT"))
cdep$Collar_end <- as.POSIXct(strptime(cdep$Collar_end,format="%Y-%m-%d %H:%M",tz="GMT"))
# gps time also needs to be handled #
gps$acquisitiontime <- as.POSIXct(strptime(gps$acquisitiontime,format="%Y-%m-%dT%H:%M:%S",tz="GMT"))
# type conversions
cdep$Serialnumber <- as.numeric(cdep$Serialnumber)
############# THIS SEGEMENT OF CODE DOES ANIMALS THAT HAVE DIED OR COLLAR IS FINISHED ##########################
# Currently only Vectronics GPS Collars are included #
# subset deployment table to collar/animal combos that are complete #
cdep.sub <- subset(cdep, (End_Type==1 | End_Type==2) & CollarType=="GPS" & (Manufacturer=="Vectronics" | Manufacturer=="Vectronic"| Manufacturer=="VECTRONIC"))
animals <- unique(cdep.sub$AnimalID)
# join the sample tables to capture table
cap1 <- cap %>% left_join(ser, by = c("Sample_ID"))
cap2 <- cap1 %>% left_join(pcr, by=c("Sample_ID"))
cap <- cap2 %>% select(AnimalID.x,Sample_ID,CaptureDate,CaptureMethod, Latitude, Longitude, Sex, AgeClass,Herd,Movi_Elisa,Movi_Status, MoviPCR)
# loop through the table and retrieve corresponding GPS data, effective but not elegant #
for (i in 1:nrow(cdep.sub)) {
# details on this sheep from ss, pcr, and ser tables #
ind <- match(cdep.sub$AnimalID[i],ss$AnimalID)
sheep <- ss[ind,]
ind.cap <- match(cdep.sub$AnimalID[i],cap$AnimalID.x) # note this gets first match in table (ignore rcap)
sheep.cap <- cap[ind.cap,]
gps.i <- subset(gps, idcollar==cdep.sub$Serialnumber[i])  # match serial numbers
gps.i <- subset(gps.i, acquisitiontime > (cdep.sub$Collar_start[i]+offset) &
acquisitiontime < (cdep.sub$Collar_end[i]-offset))
# things we want to add to the GPS file, like AnimalID or Collar Frequency or Herd, or Sex?
gps.i$AnimalID <- rep(cdep.sub$AnimalID[i],nrow(gps.i))
gps.i$Frequency <- rep(cdep.sub$Frequency[i],nrow(gps.i))
gps.i$Herd <- rep(sheep$Herd,nrow(gps.i))
gps.i$Sex <- rep(sheep$Sex,nrow(gps.i))
gps.i$CapturePCRStatus <- rep(sheep.cap$MoviPCR,nrow(gps.i))
gps.i$CaptureELISAStatus <- rep(sheep.cap$Movi_Status,nrow(gps.i))
gps.i$Capture_cELISA <- rep(sheep.cap$Movi_Elisa,nrow(gps.i))
# move these new columns towards the "front"
gps.i <- relocate(gps.i, Sex, .before=acquisitiontime)
gps.i <- relocate(gps.i, Herd, .before = Sex)
gps.i <- relocate(gps.i, Frequency, .before = Herd)
gps.i <- relocate(gps.i, AnimalID, .before = Frequency)
gps.i <- relocate(gps.i, CapturePCRStatus, .before=acquisitiontime)
gps.i <- relocate(gps.i, CaptureELISAStatus, .before=acquisitiontime)
gps.i <- relocate(gps.i, Capture_cELISA, .before=acquisitiontime)
if (i==1){
out.data <- gps.i
} else out.data <- rbind(out.data,gps.i)   # build a data frame with all animals
} # end collar construct for loop
# the R time coding needs to be changed back to character #
out.data$acquisitiontime <- as.character(out.data$acquisitiontime)
# write table to DB
# first time of code execution only, to create the table, commented out afterwards
#dbWriteTable(con, "AnimalID_GPS_Data", out.data, overwrite=TRUE)
# write new data to a table, create new table every time adn append write date to table name for now #
table.name <- paste(ended.prefix,format(Sys.Date(), "%Y_%m_%d"),sep='')
dbWriteTable(con, table.name, out.data,overwrite=TRUE)
# write a log table to DB for tracking purposes #
complete.animals <- data.frame(AnimalID=animals, GPSWriteDate=as.character(c(rep(Sys.Date(),length(animals)))))
#dbWriteTable(con, "Log_of_AnimalID_GPS_Data", complete.animals)
dbWriteTable(con, "Log_of_AnimalID_GPS_Data_EndedCollars", complete.animals,append=TRUE)
############## END SECTION OF ANIMALS WITH COMPLETE COLLAR DATA  ###############################################
########### BEGIN SECTION WHICH CREATES GPS FILES FOR ALL ANIMALS WHOSE COLLAR IS STILL ACTIVE IN THE DB #########
cdep.sub <- subset(cdep, (End_Type==0) & CollarType=="GPS" & (Manufacturer=="Vectronics" | Manufacturer=="Vectronic"| Manufacturer=="VECTRONIC"))
animals <- unique(cdep.sub$AnimalID)
# loop through the table and retrieve corresponding GPS data, effective but not elegant #
for (i in 1:nrow(cdep.sub)) {
# details on this sheep #
ind <- match(cdep.sub$AnimalID[i],ss$AnimalID)
sheep <- ss[ind,]
ind.cap <- match(cdep.sub$AnimalID[i],cap$AnimalID.x) # note this gets first match in table (ignore rcap)
sheep.cap <- cap[ind.cap,]
gps.i <- subset(gps, idcollar==cdep.sub$Serialnumber[i])  # match serial numbers
gps.i <- subset(gps.i, acquisitiontime > (cdep.sub$Collar_start[i]+offset))
# things we want to add to the GPS file, like AnimalID or Collar Frequency or Herd, or Sex?
gps.i$AnimalID <- rep(cdep.sub$AnimalID[i],nrow(gps.i))
gps.i$Frequency <- rep(cdep.sub$Frequency[i],nrow(gps.i))
gps.i$Herd <- rep(sheep$Herd,nrow(gps.i))
gps.i$Sex <- rep(sheep$Sex,nrow(gps.i))
gps.i$CapturePCRStatus <- rep(sheep.cap$MoviPCR,nrow(gps.i))
gps.i$CaptureELISAStatus <- rep(sheep.cap$Movi_Status,nrow(gps.i))
gps.i$Capture_cELISA <- rep(sheep.cap$Movi_Elisa,nrow(gps.i))
# move these new columns towards the "front"
gps.i <- relocate(gps.i, Sex, .before=acquisitiontime)
gps.i <- relocate(gps.i, Herd, .before = Sex)
gps.i <- relocate(gps.i, Frequency, .before = Herd)
gps.i <- relocate(gps.i, AnimalID, .before = Frequency)
gps.i <- relocate(gps.i, CapturePCRStatus, .before=acquisitiontime)
gps.i <- relocate(gps.i, CaptureELISAStatus, .before=acquisitiontime)
gps.i <- relocate(gps.i, Capture_cELISA, .before=acquisitiontime)
if (i==1){
out.data.c <- gps.i
} else out.data.c <- rbind(out.data.c,gps.i)   # build a data frame with all animals
} # end collar construct for loop
# the R time coding needs to be changed back to character #
out.data.c$acquisitiontime <- as.character(out.data.c$acquisitiontime)
# write table to DB
# first time of code execution only, to create the table, commented out afterwards
#dbWriteTable(con, "AnimalID_GPS_Data", out.data, overwrite=TRUE)
# write new data to a table, create new table every time adn append write date to table name for now #
table.name <- paste(active.prefix,format(Sys.Date(), "%Y_%m_%d"),sep='')
dbWriteTable(con, table.name, out.data.c,overwrite=TRUE)
# write a log table to DB for tracking purposes #
active.animals <- data.frame(AnimalID=animals, GPSWriteDate=as.character(c(rep(Sys.Date(),length(animals)))))
#dbWriteTable(con, "Log_of_AnimalID_GPS_Data", complete.animals)
dbWriteTable(con, "Log_of_AnimalID_GPS_Data_ActiveCollars", active.animals,append=TRUE)
##### END ACTIVE COLLAR SECTION ###################################################################33
# write a file with all completed and active collars #
all.data <- rbind(out.data,out.data.c)
table.name <- paste(all.prefix,format(Sys.Date(), "%Y_%m_%d"),sep='')
dbWriteTable(con, table.name, all.data,overwrite=TRUE)
# close DB con
dbDisconnect(con)
dbpath <- "/Users/scottp/Library/CloudStorage/Box-Box/WSF-GIA-FY22/Database/BHS_TriState.db"
# gps table name in DB
gps.tab.name <- "AnimalID_GPS_Data_AllCollars_2023_04_26"
# where we writing it
path_to_save <- "/Users/scottp/DocumentsNew/BighornSheep/FY22-WSF-GIA/RCode/ShinyApps/HomeRangeOverlap/HomeRangeOverlapShiny/data/"
filename <- "appdata.rda"
con <- dbConnect(RSQLite::SQLite(),dbpath, extended_types=TRUE)
# grab a table of AnimalID attributed GPS data to work with from above list
gps <- dbReadTable(con,gps.tab.name)
# close out DB connection
dbDisconnect(con)
# good habit to remove missing GPS locations
# check for missing lat/lon and drop #
missing.loc <- which(is.na(gps$latitude),arr.ind=TRUE)
gps <- gps[-(missing.loc),]
# save as R data
save(gps, file=paste(path_to_save,filename,sep=""))
runApp()
runGitHub( "HomerangeOverlapShiny", "scottpeckham")
runGitHub( "HomerangeOverlapShiny", "scottpeckham")
runApp()
runApp()
runApp()
runApp()
runGitHub( "HomerangeOverlapShiny", "scottpeckham")
?visGroups
nodes <- data.frame(id = 1:10, label = paste("Label", 1:10),
group = sample(c("A", "B"), 10, replace = TRUE))
edges <- data.frame(from = c(2,5,10), to = c(1,2,10))
visNetwork(nodes, edges) %>%
visLegend() %>%
visGroups(groupname = "A", color = "red", shape = "database") %>%
visGroups(groupname = "B", color = "yellow", shape = "triangle")
runApp()
# set label color to test Elisa results
V(g)$label.color <- test.col[label.col.map]
runApp()
runApp()
runApp()
